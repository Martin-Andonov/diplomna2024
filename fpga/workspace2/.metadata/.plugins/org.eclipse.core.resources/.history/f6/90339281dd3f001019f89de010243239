/******************************************************************************
* Copyright (C) 2023 Advanced Micro Devices, Inc. All Rights Reserved.
* SPDX-License-Identifier: MIT
******************************************************************************/
/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */
#include "xparameters.h"
#include "xiic.h"
#include "xstatus.h"
#include <stdio.h>
#include <unistd.h>

// Настройки на I2C и AHT20
#define IIC_DEVICE_ID XPAR_IIC_0_DEVICE_ID
#define AHT20_I2C_ADDRESS 0x38

XIic IicInstance;

// Прототипи
int I2C_Init();
int AHT20_Init();
int AHT20_Read_Temperature_Humidity(float *temperature, float *humidity);

int main() {
    int status;
    float temperature, humidity;

    // Инициализация на I2C
    status = I2C_Init();
    if (status != XST_SUCCESS) {
        printf("I2C init failed\n");
        return XST_FAILURE;
    }

    // Инициализация на AHT20
    status = AHT20_Init();
    if (status != XST_SUCCESS) {
        printf("AHT20 init failed\n");
        return XST_FAILURE;
    }

    while (1) {
        status = AHT20_Read_Temperature_Humidity(&temperature, &humidity);
        if (status == XST_SUCCESS) {
            printf("Temperature: %.2f°C, Humidity: %.2f%%\n", temperature, humidity);
        } else {
            printf("Failed to read AHT20 data\n");
        }

        sleep(1); // Чака 1 секунда
    }

    return XST_SUCCESS;
}

int I2C_Init() {
    return XIic_Initialize(&IicInstance, IIC_DEVICE_ID) == XST_SUCCESS ? XST_SUCCESS : XST_FAILURE;
}

int AHT20_Init() {
    u8 cmd[3] = {0xBE, 0x08, 0x00}; // Initialization command
    int status = XIic_Send(IicInstance.BaseAddress, AHT20_I2C_ADDRESS, cmd, 3, XIIC_STOP);
    usleep(10000); // 10 ms изчакване
    return (status == 3) ? XST_SUCCESS : XST_FAILURE;
}

int AHT20_Read_Temperature_Humidity(float *temperature, float *humidity) {
    u8 cmd[3] = {0xAC, 0x33, 0x00};
    u8 data[6];
    int status;

    // Изпрати команда за измерване
    status = XIic_Send(IicInstance.BaseAddress, AHT20_I2C_ADDRESS, cmd, 3, XIIC_STOP);
    if (status != 3) return XST_FAILURE;

    usleep(80000); // 80 ms за измерване

    // Прочети 6 байта данни
    status = XIic_Recv(IicInstance.BaseAddress, AHT20_I2C_ADDRESS, data, 6, XIIC_STOP);
    if (status != 6) return XST_FAILURE;

    // Принтирай суровите байтове
    printf("Raw AHT20 data: ");
    for (int i = 0; i < 6; i++) {
        printf("0x%02X ", data[i]);
    }
    printf("\n");

    // Проверка на статус бита (bit 7 трябва да е 0 ако данните са готови)
    if (data[0] & 0x80) {
        printf("Measurement not ready\n");
        return XST_FAILURE;
    }

    // Извличане на влажност
    uint32_t raw_humidity = ((uint32_t)(data[1]) << 12) | ((uint32_t)(data[2]) << 4) | ((data[3] & 0xF0) >> 4);
    // Извличане на температура
    uint32_t raw_temperature = ((uint32_t)(data[3] & 0x0F) << 16) | ((uint32_t)(data[4]) << 8) | data[5];

    *humidity = ((float)raw_humidity * 100.0f) / 1048576.0f;
    *temperature = ((float)raw_temperature * 200.0f) / 1048576.0f - 50.0f;

    return XST_SUCCESS;
}
