/******************************************************************************
* Copyright (C) 2023 Advanced Micro Devices, Inc. All Rights Reserved.
* SPDX-License-Identifier: MIT
******************************************************************************/
/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */
#include "xparameters.h"
#include "xiic.h"
#include "xstatus.h"
#include <stdio.h>
#include <unistd.h>

#define IIC_DEVICE_ID XPAR_IIC_0_DEVICE_ID
#define AHT20_I2C_ADDRESS 0x38

XIic IicInstance;

int I2C_Init();
int AHT20_Init();
int AHT20_Read(float *temperature, float *humidity);

int main() {
    int status;
    float temperature, humidity;

    status = I2C_Init();
    if (status != XST_SUCCESS) return XST_FAILURE;

    status = AHT20_Init();
    if (status != XST_SUCCESS) return XST_FAILURE;

    while (1) {
        status = AHT20_Read(&temperature, &humidity);
        if (status == XST_SUCCESS) {
            xil_printf("Temperature: %.2f °C, Humidity: %.2f %%\n", temperature, humidity);
        } else {
            xil_printf("Failed to read from AHT20 sensor\n");
        }

        sleep(5); // Delay 5 seconds
    }

    return XST_SUCCESS;
}

int I2C_Init() {
    return XIic_Initialize(&IicInstance, IIC_DEVICE_ID) == XST_SUCCESS ? XST_SUCCESS : XST_FAILURE;
}

int AHT20_Init() {
    u8 cmd[3] = {0xBE, 0x08, 0x00}; // Initialization command
    int status = XIic_Send(IicInstance.BaseAddress, AHT20_I2C_ADDRESS, cmd, 3, XIIC_STOP);
    usleep(10000);
    return (status == 3) ? XST_SUCCESS : XST_FAILURE;
}

int AHT20_Read(float *temperature, float *humidity) {
    u8 cmd[3] = {0xAC, 0x33, 0x00};
    u8 data[6];
    int status;

    status = XIic_Send(IicInstance.BaseAddress, AHT20_I2C_ADDRESS, cmd, 3, XIIC_STOP);
    if (status != 3) return XST_FAILURE;

    usleep(80000); // Wait for measurement

    status = XIic_Recv(IicInstance.BaseAddress, AHT20_I2C_ADDRESS, data, 6, XIIC_STOP);
    if (status != 6) return XST_FAILURE;

    // Humidity
    u32 raw_hum = ((data[1] << 12) | (data[2] << 4) | (data[3] >> 4));
    *humidity = ((float)raw_hum * 100.0) / 1048576.0;

    // Temperature
    u32 raw_temp = (((data[3] & 0x0F) << 16) | (data[4] << 8) | data[5]);
    *temperature = ((float)raw_temp * 200.0 / 1048576.0) - 50.0;

    return XST_SUCCESS;
}
